{:group-id "rewrite-cljs",
 :artifact-id "rewrite-cljs",
 :version "0.4.4",
 :analysis {"clj" (),
         "cljs" ({:name rewrite-clj.node,
                  :doc "Facade for node related namespaces.\n",
                  :publics ({:name child-sexprs,
                             :file "rewrite_clj/node.cljs",
                             :line 37,
                             :doc "See [[protocols/sexprs]]\n",
                             :type :var}
                            {:name children,
                             :file "rewrite_clj/node.cljs",
                             :line 34,
                             :doc "See [[protocols/children]]\n",
                             :type :var}
                            {:name coerce,
                             :file "rewrite_clj/node.cljs",
                             :line 49,
                             :doc "See [[protocols/coerce]]\n",
                             :type :var}
                            {:name comment-node,
                             :file "rewrite_clj/node.cljs",
                             :line 97,
                             :doc "See [[comment/comment-node]]\n",
                             :type :var}
                            {:name comment?,
                             :file "rewrite_clj/node.cljs",
                             :line 100,
                             :doc "See [[comment/comment?]]\n",
                             :type :var}
                            {:name deref-node,
                             :file "rewrite_clj/node.cljs",
                             :line 155,
                             :doc "See [[reader-macro/deref-node]]\n",
                             :type :var}
                            {:name eval-node,
                             :file "rewrite_clj/node.cljs",
                             :line 149,
                             :doc "See [[reader-macro/eval-node]]\n",
                             :type :var}
                            {:name fn-node,
                             :file "rewrite_clj/node.cljs",
                             :line 195,
                             :doc "See [[fn/fn-node]]\n",
                             :type :var}
                            {:name forms-node,
                             :file "rewrite_clj/node.cljs",
                             :line 60,
                             :doc "see [[forms/forms-node]]\n",
                             :type :var}
                            {:name inner?,
                             :file "rewrite_clj/node.cljs",
                             :line 43,
                             :doc "See [[protocols/inner?]]\n",
                             :type :var}
                            {:name keyword-node,
                             :file "rewrite_clj/node.cljs",
                             :line 63,
                             :doc "see [[keyword/keyword-node]]\n",
                             :type :var}
                            {:name length,
                             :file "rewrite_clj/node.cljs",
                             :line 52,
                             :doc "See [[protocols/length]]\n",
                             :type :var}
                            {:name linebreak?,
                             :file "rewrite_clj/node.cljs",
                             :line 124,
                             :doc "See [[whitespace/linebreak?]]\n",
                             :type :var}
                            {:name list-node,
                             :file "rewrite_clj/node.cljs",
                             :line 71,
                             :doc "See [[seq/list-node]]\n",
                             :type :var}
                            {:name map-node,
                             :file "rewrite_clj/node.cljs",
                             :line 80,
                             :doc "See [[seq/map-node]]\n",
                             :type :var}
                            {:name meta-node,
                             :file "rewrite_clj/node.cljs",
                             :line 188,
                             :doc "See [[meta/meta-node]]\n",
                             :type :var}
                            {:name newline-node,
                             :file "rewrite_clj/node.cljs",
                             :line 112,
                             :doc "See [[whitespace/newline-node]]\n",
                             :type :var}
                            {:name newlines,
                             :file "rewrite_clj/node.cljs",
                             :line 118,
                             :doc "See [[whitespace/newlines]]\n",
                             :type :var}
                            {:name printable-only?,
                             :file "rewrite_clj/node.cljs",
                             :line 46,
                             :doc "See [[protocols/printable-only?]]\n",
                             :type :var}
                            {:name quote-node,
                             :file "rewrite_clj/node.cljs",
                             :line 163,
                             :doc "See [[quote/quote-node]]\n",
                             :type :var}
                            {:name reader-macro-node,
                             :file "rewrite_clj/node.cljs",
                             :line 152,
                             :doc "See [[reader-macro/reader-macro-node]]\n",
                             :type :var}
                            {:name replace-children,
                             :file "rewrite_clj/node.cljs",
                             :line 40,
                             :doc "See [[protocols/replace-children]]\n",
                             :type :var}
                            {:name set-node,
                             :file "rewrite_clj/node.cljs",
                             :line 77,
                             :doc "See [[seq/set-node]]\n",
                             :type :var}
                            {:name sexpr,
                             :file "rewrite_clj/node.cljs",
                             :line 28,
                             :doc "See [[protocols/sexpr]]\n",
                             :type :var}
                            {:name spaces,
                             :file "rewrite_clj/node.cljs",
                             :line 115,
                             :doc "See [[whitespace/spaces]]\n",
                             :type :var}
                            {:name string,
                             :file "rewrite_clj/node.cljs",
                             :line 31,
                             :doc "See [[protocols/string]]\n",
                             :type :var}
                            {:name string-node,
                             :file "rewrite_clj/node.cljs",
                             :line 88,
                             :doc "See [[stringz/string-node]]\n",
                             :type :var}
                            {:name syntax-quote-node,
                             :file "rewrite_clj/node.cljs",
                             :line 166,
                             :doc "See [[quote/syntax-quote-node]]\n",
                             :type :var}
                            {:name tag,
                             :file "rewrite_clj/node.cljs",
                             :line 25,
                             :doc "See [[protocols/tag]]\n",
                             :type :var}
                            {:name token-node,
                             :file "rewrite_clj/node.cljs",
                             :line 138,
                             :doc "See [[token/token-node]]\n",
                             :type :var}
                            {:name uneval-node,
                             :file "rewrite_clj/node.cljs",
                             :line 180,
                             :doc "See [[uneval/uneval-node]]\n",
                             :type :var}
                            {:name unquote-node,
                             :file "rewrite_clj/node.cljs",
                             :line 169,
                             :doc "See [[quote/unquote-node]]\n",
                             :type :var}
                            {:name unquote-splicing-node,
                             :file "rewrite_clj/node.cljs",
                             :line 172,
                             :doc "See [[quote/unquote-splicing-node]]\n",
                             :type :var}
                            {:name var-node,
                             :file "rewrite_clj/node.cljs",
                             :line 146,
                             :doc "See [[reader-macro/var-node]]\n",
                             :type :var}
                            {:name vector-node,
                             :file "rewrite_clj/node.cljs",
                             :line 74,
                             :doc "See [[seq/vector-node]]\n",
                             :type :var}
                            {:name whitespace-node,
                             :file "rewrite_clj/node.cljs",
                             :line 109,
                             :doc "See [[whitespace/whitespace-node]]\n",
                             :type :var}
                            {:name whitespace-or-comment?,
                             :file "rewrite_clj/node.cljs",
                             :line 128,
                             :arglists ([node]),
                             :doc "Check whether the given node represents whitespace or comment.\n",
                             :type :var}
                            {:name whitespace?,
                             :file "rewrite_clj/node.cljs",
                             :line 121,
                             :doc "See [[whitespace/whitespace?]]\n",
                             :type :var})}
                 {:name rewrite-clj.node.coercer,
                  :publics ({:name node-with-meta,
                             :file "rewrite_clj/node/coercer.cljs",
                             :line 18,
                             :arglists ([n value]),
                             :type :var}
                            {:name seq-node,
                             :file "rewrite_clj/node/coercer.cljs",
                             :line 57,
                             :arglists ([f sq]),
                             :type :var})}
                 {:name rewrite-clj.node.comment,
                  :publics ({:name comment-node,
                             :file "rewrite_clj/node/comment.cljs",
                             :line 25,
                             :arglists ([s]),
                             :doc "Create node representing an EDN comment.\n",
                             :type :var}
                            {:name comment?,
                             :file "rewrite_clj/node/comment.cljs",
                             :line 30,
                             :arglists ([node]),
                             :doc "Check whether a node represents a comment.\n",
                             :type :var}
                            {:name CommentNode,
                             :file "rewrite_clj/node/comment.cljs",
                             :line 6,
                             :type :var})}
                 {:name rewrite-clj.node.fn,
                  :no-doc true,
                  :publics ({:name fn-node,
                             :file "rewrite_clj/node/fn.cljs",
                             :line 94,
                             :arglists ([children]),
                             :doc "Create node representing an anonymous function.\n",
                             :type :var}
                            {:name FnNode,
                             :file "rewrite_clj/node/fn.cljs",
                             :line 65,
                             :type :var})}
                 {:name rewrite-clj.node.forms,
                  :publics ({:name forms-node,
                             :file "rewrite_clj/node/forms.cljs",
                             :line 39,
                             :arglists ([children]),
                             :doc "Create top-level node wrapping multiple children\n(equals an implicit `do` on the top-level).",
                             :type :var}
                            {:name FormsNode,
                             :file "rewrite_clj/node/forms.cljs",
                             :line 6,
                             :type :var})}
                 {:name rewrite-clj.node.keyword,
                  :publics ({:name keyword-node,
                             :file "rewrite_clj/node/keyword.cljs",
                             :line 43,
                             :arglists ([k & [namespaced?]]),
                             :doc "Create node representing a keyword. If `namespaced?` is given as `true`\na keyword à la `::x` or `::ns/x` (i.e. namespaced/aliased) is generated.",
                             :type :var}
                            {:name KeywordNode,
                             :file "rewrite_clj/node/keyword.cljs",
                             :line 6,
                             :type :var})}
                 {:name rewrite-clj.node.meta,
                  :publics ({:name meta-node,
                             :file "rewrite_clj/node/meta.cljs",
                             :line 37,
                             :arglists ([children] [metadata data]),
                             :doc "Create node representing a form and its metadata.\n",
                             :type :var}
                            {:name MetaNode,
                             :file "rewrite_clj/node/meta.cljs",
                             :line 7,
                             :type :var}
                            {:name raw-meta-node,
                             :file "rewrite_clj/node/meta.cljs",
                             :line 45,
                             :arglists ([children] [metadata data]),
                             :doc "Create node representing a form and its metadata using the\n`#^` prefix.",
                             :type :var})}
                 {:name rewrite-clj.node.protocols,
                  :publics ({:name assert-sexpr-count,
                             :file "rewrite_clj/node/protocols.cljs",
                             :line 97,
                             :arglists ([nodes c]),
                             :type :var}
                            {:name assert-single-sexpr,
                             :file "rewrite_clj/node/protocols.cljs",
                             :line 103,
                             :arglists ([nodes]),
                             :type :var}
                            {:name child-sexprs,
                             :file "rewrite_clj/node/protocols.cljs",
                             :line 65,
                             :arglists ([node]),
                             :doc "Get all child s-expressions for the given node.\n",
                             :type :var}
                            {:name concat-strings,
                             :file "rewrite_clj/node/protocols.cljs",
                             :line 42,
                             :arglists ([nodes]),
                             :doc "Convert nodes to strings and concatenate them.\n",
                             :type :var}
                            {:name InnerNode,
                             :file "rewrite_clj/node/protocols.cljs",
                             :line 48,
                             :doc "Protocol for non-leaf EDN/Clojure nodes.\n",
                             :type :protocol,
                             :members ({:name children,
                                        :arglists ([_]),
                                        :doc "Get child nodes.\n",
                                        :type :var}
                                       {:name inner?,
                                        :arglists ([_]),
                                        :doc "Check whether the node can contain children.\n",
                                        :type :var}
                                       {:name replace-children,
                                        :arglists ([_ children]),
                                        :doc "Replace the node's children.\n",
                                        :type :var})}
                            {:name Node,
                             :file "rewrite_clj/node/protocols.cljs",
                             :line 6,
                             :doc "Protocol for EDN/Clojure nodes.\n",
                             :type :protocol,
                             :members ({:name length,
                                        :arglists ([_]),
                                        :doc "Get number of characters for the string version of this node.\n",
                                        :type :var}
                                       {:name printable-only?,
                                        :arglists ([_]),
                                        :doc "Return true if the node cannot be converted to an s-expression\nelement.",
                                        :type :var}
                                       {:name sexpr,
                                        :arglists ([_]),
                                        :doc "Convert node to s-expression.\n",
                                        :type :var}
                                       {:name string,
                                        :arglists ([_]),
                                        :doc "Convert node to printable string.\n",
                                        :type :var}
                                       {:name tag,
                                        :arglists ([_]),
                                        :doc "Keyword representing the type of the node.\n",
                                        :type :var})}
                            {:name NodeCoerceable,
                             :file "rewrite_clj/node/protocols.cljs",
                             :line 72,
                             :doc "Protocol for values that can be coerced to nodes.\n",
                             :type :protocol,
                             :members ({:name coerce,
                                        :arglists ([_]),
                                        :type :var})}
                            {:name sexprs,
                             :file "rewrite_clj/node/protocols.cljs",
                             :line 29,
                             :arglists ([nodes]),
                             :doc "Given a seq of nodes, convert those that represent s-expressions\nto the respective forms.",
                             :type :var}
                            {:name sum-lengths,
                             :file "rewrite_clj/node/protocols.cljs",
                             :line 37,
                             :arglists ([nodes]),
                             :doc "Sum up lengths of the given nodes.\n",
                             :type :var})}
                 {:name rewrite-clj.node.quote,
                  :no-doc true,
                  :publics ({:name quote-node,
                             :file "rewrite_clj/node/quote.cljs",
                             :line 37,
                             :arglists ([children]),
                             :doc "Create node representing a quoted form.\nTakes either a seq of nodes or a single one.",
                             :type :var}
                            {:name QuoteNode,
                             :file "rewrite_clj/node/quote.cljs",
                             :line 6,
                             :type :var}
                            {:name syntax-quote-node,
                             :file "rewrite_clj/node/quote.cljs",
                             :line 47,
                             :arglists ([children]),
                             :doc "Create node representing a syntax-quoted form.\nTakes either a seq of nodes or a single one.",
                             :type :var}
                            {:name unquote-node,
                             :file "rewrite_clj/node/quote.cljs",
                             :line 57,
                             :arglists ([children]),
                             :doc "Create node representing an unquoted form. (`~...`)\nTakes either a seq of nodes or a single one.",
                             :type :var}
                            {:name unquote-splicing-node,
                             :file "rewrite_clj/node/quote.cljs",
                             :line 67,
                             :arglists ([children]),
                             :doc "Create node representing an unquote-spliced form. (`~@...`)\nTakes either a seq of nodes or a single one.",
                             :type :var})}
                 {:name rewrite-clj.node.reader-macro,
                  :no-doc true,
                  :publics ({:name deref-node,
                             :file "rewrite_clj/node/reader_macro.cljs",
                             :line 128,
                             :arglists ([children]),
                             :doc "Create node representing the dereferencing of a form. (`@...`)\nTakes either a seq of nodes or a single one.",
                             :type :var}
                            {:name DerefNode,
                             :file "rewrite_clj/node/reader_macro.cljs",
                             :line 62,
                             :type :var}
                            {:name eval-node,
                             :file "rewrite_clj/node/reader_macro.cljs",
                             :line 110,
                             :arglists ([children]),
                             :doc "Create node representing an inline evaluation. (`#=...`)\nTakes either a seq of nodes or a single one.",
                             :type :var}
                            {:name reader-macro-node,
                             :file "rewrite_clj/node/reader_macro.cljs",
                             :line 121,
                             :arglists ([children]
                                        [macro-node form-node]),
                             :doc "Create node representing a reader macro. (`#... ...`)\n",
                             :type :var}
                            {:name ReaderMacroNode,
                             :file "rewrite_clj/node/reader_macro.cljs",
                             :line 38,
                             :type :var}
                            {:name ReaderNode,
                             :file "rewrite_clj/node/reader_macro.cljs",
                             :line 7,
                             :type :var}
                            {:name var-node,
                             :file "rewrite_clj/node/reader_macro.cljs",
                             :line 102,
                             :arglists ([children]),
                             :doc "Create node representing a var.\nTakes either a seq of nodes or a single one.",
                             :type :var})}
                 {:name rewrite-clj.node.seq,
                  :publics ({:name list-node,
                             :file "rewrite_clj/node/seq.cljs",
                             :line 47,
                             :arglists ([children]),
                             :doc "Create a node representing an EDN list.\n",
                             :type :var}
                            {:name map-node,
                             :file "rewrite_clj/node/seq.cljs",
                             :line 62,
                             :arglists ([children]),
                             :doc "Create a node representing an EDN map.\n",
                             :type :var}
                            {:name SeqNode,
                             :file "rewrite_clj/node/seq.cljs",
                             :line 13,
                             :type :var}
                            {:name set-node,
                             :file "rewrite_clj/node/seq.cljs",
                             :line 57,
                             :arglists ([children]),
                             :doc "Create a node representing an EDN set.\n",
                             :type :var}
                            {:name vector-node,
                             :file "rewrite_clj/node/seq.cljs",
                             :line 52,
                             :arglists ([children]),
                             :doc "Create a node representing an EDN vector.\n",
                             :type :var}
                            {:name wrap-list,
                             :file "rewrite_clj/node/seq.cljs",
                             :line 7,
                             :arglists ([s]),
                             :type :var}
                            {:name wrap-map,
                             :file "rewrite_clj/node/seq.cljs",
                             :line 9,
                             :arglists ([s]),
                             :type :var}
                            {:name wrap-set,
                             :file "rewrite_clj/node/seq.cljs",
                             :line 8,
                             :arglists ([s]),
                             :type :var}
                            {:name wrap-vec,
                             :file "rewrite_clj/node/seq.cljs",
                             :line 6,
                             :arglists ([s]),
                             :type :var})}
                 {:name rewrite-clj.node.stringz,
                  :publics ({:name string-node,
                             :file "rewrite_clj/node/stringz.cljs",
                             :line 42,
                             :arglists ([lines]),
                             :doc "Create node representing a string value.\nTakes either a seq of strings or a single one.",
                             :type :var}
                            {:name StringNode,
                             :file "rewrite_clj/node/stringz.cljs",
                             :line 16,
                             :type :var})}
                 {:name rewrite-clj.node.token,
                  :publics ({:name token-node,
                             :file "rewrite_clj/node/token.cljs",
                             :line 23,
                             :arglists ([value] [value string-value]),
                             :doc "Create node for an unspecified EDN token.\n",
                             :type :var}
                            {:name TokenNode,
                             :file "rewrite_clj/node/token.cljs",
                             :line 6,
                             :type :var})}
                 {:name rewrite-clj.node.uneval,
                  :no-doc true,
                  :publics ({:name uneval-node,
                             :file "rewrite_clj/node/uneval.cljs",
                             :line 32,
                             :arglists ([children]),
                             :doc "Create node representing an EDN uneval `#_` form.\n",
                             :type :var}
                            {:name UnevalNode,
                             :file "rewrite_clj/node/uneval.cljs",
                             :line 6,
                             :type :var})}
                 {:name rewrite-clj.node.whitespace,
                  :publics ({:name *count-fn*,
                             :file "rewrite_clj/node/whitespace.cljs",
                             :line 10,
                             :doc "This function is applied to every newline string and should produce\nthe eventual character count.",
                             :dynamic true,
                             :type :var}
                            {:name *newline-fn*,
                             :file "rewrite_clj/node/whitespace.cljs",
                             :line 6,
                             :doc "This function is applied to every newline string.\n",
                             :dynamic true,
                             :type :var}
                            {:name comma-separated,
                             :file "rewrite_clj/node/whitespace.cljs",
                             :line 101,
                             :arglists ([nodes]),
                             :doc "Interleave the given seq of nodes with `\", \"` nodes.\n",
                             :type :var}
                            {:name line-separated,
                             :file "rewrite_clj/node/whitespace.cljs",
                             :line 107,
                             :arglists ([nodes]),
                             :doc "Interleave the given seq of nodes with newline nodes.\n",
                             :type :var}
                            {:name linebreak?,
                             :file "rewrite_clj/node/whitespace.cljs",
                             :line 128,
                             :arglists ([node]),
                             :doc "Check whether a ndoe represents linebreaks.\n",
                             :type :var}
                            {:name newline-node,
                             :file "rewrite_clj/node/whitespace.cljs",
                             :line 65,
                             :arglists ([s]),
                             :doc "Create newline node.\n",
                             :type :var}
                            {:name NewlineNode,
                             :file "rewrite_clj/node/whitespace.cljs",
                             :line 41,
                             :type :var}
                            {:name newlines,
                             :file "rewrite_clj/node/whitespace.cljs",
                             :line 93,
                             :arglists ([n]),
                             :doc "Create node representing the given number of newline characters.\n",
                             :type :var}
                            {:name space-separated,
                             :file "rewrite_clj/node/whitespace.cljs",
                             :line 113,
                             :arglists ([nodes]),
                             :doc "Interleave the given seq of nodes with `\" \"` nodes.\n",
                             :type :var}
                            {:name spaces,
                             :file "rewrite_clj/node/whitespace.cljs",
                             :line 88,
                             :arglists ([n]),
                             :doc "Create node representing the given number of spaces.\n",
                             :type :var}
                            {:name whitespace-node,
                             :file "rewrite_clj/node/whitespace.cljs",
                             :line 60,
                             :arglists ([s]),
                             :doc "Create whitespace node.\n",
                             :type :var}
                            {:name whitespace-nodes,
                             :file "rewrite_clj/node/whitespace.cljs",
                             :line 75,
                             :arglists ([s]),
                             :doc "Convert a string of whitespace to whitespace/newline nodes.\n",
                             :type :var}
                            {:name whitespace?,
                             :file "rewrite_clj/node/whitespace.cljs",
                             :line 120,
                             :arglists ([node]),
                             :doc "Check whether a node represents whitespace.\n",
                             :type :var}
                            {:name WhitespaceNode,
                             :file "rewrite_clj/node/whitespace.cljs",
                             :line 29,
                             :type :var})}
                 {:name rewrite-clj.paredit,
                  :doc "This namespace provides zipper operations for performing paredit type of\noperations on clojure/clojurescript forms.\n\nYou might find inspirational examples here: http://pub.gajendra.net/src/paredit-refcard.pdf",
                  :publics ({:name barf-backward,
                             :file "rewrite_clj/paredit.cljs",
                             :line 345,
                             :arglists ([zloc]),
                             :doc "Push out the leftmost node of the current S-expression into outer left form\n\n- `[1 2 [3 |4] 5] => [1 2 3 [|4] 5]`",
                             :type :var}
                            {:name barf-forward,
                             :file "rewrite_clj/paredit.cljs",
                             :line 321,
                             :arglists ([zloc]),
                             :doc "Push out the rightmost node of the current S-expression into outer right form\n\n- `[1 2 [|3 4] 5] => [1 2 [|3] 4 5]`",
                             :type :var}
                            {:name join,
                             :file "rewrite_clj/paredit.cljs",
                             :line 505,
                             :arglists ([zloc]),
                             :doc "Join S-expression to the left and right of current loc. Also works for strings.\n\n- `[[1 2] |[3 4]] => [[1 2 3 4]]`\n- `[\"Hello \" | \"World\"] => [\"Hello World\"]",
                             :type :var}
                            {:name kill,
                             :file "rewrite_clj/paredit.cljs",
                             :line 88,
                             :arglists ([zloc]),
                             :doc "Kill all sibling nodes to the right of the current node\n\n- [1 2| 3 4] => [1 2|]",
                             :type :var}
                            {:name kill-at-pos,
                             :file "rewrite_clj/paredit.cljs",
                             :line 133,
                             :arglists ([zloc pos]),
                             :doc "In string and comment aware kill\n\nPerform kill for given position `pos` Like [[kill]], but:\n\n- if inside string kills to end of string and stops there\n- If inside comment kills to end of line (not including linebreak!)\n\n`pos` should provide `{:row :col }` which are relative to the start of the given form the zipper represents\n`zloc` must be positioned at a node previous (given depth first) to the node at given pos",
                             :type :var}
                            {:name kill-one-at-pos,
                             :file "rewrite_clj/paredit.cljs",
                             :line 202,
                             :arglists ([zloc pos]),
                             :doc "In string and comment aware kill for one node/word at given pos\n\n- `(+ |100 100) => (+ |100)`\n- `(for |(bar do)) => (foo)`\n- `\"|hello world\" => \"| world\"`\n- ` ; |hello world => ;  |world`",
                             :type :var}
                            {:name move-n,
                             :file "rewrite_clj/paredit.cljs",
                             :line 25,
                             :arglists ([loc f n]),
                             :no-doc true,
                             :type :var}
                            {:name move-to-prev,
                             :file "rewrite_clj/paredit.cljs",
                             :line 534,
                             :arglists ([zloc]),
                             :doc "Move node at current location to the position of previous location given a depth first traversal\n\n  -  `(+ 1 (+ 2 |3) 4) => (+ 1 (+ |3 2) 4)`\n  - `(+ 1 (+ 2 3) |4) => (+ 1 (+ 2 3 |4))`\n\nreturns zloc after move or given zloc if a move isn't possible",
                             :type :var}
                            {:name raise,
                             :file "rewrite_clj/paredit.cljs",
                             :line 523,
                             :arglists ([zloc]),
                             :doc "Delete siblings and raise node at zloc one level up\n\n- `[1 [2 |3 4]] => [1 |3]`",
                             :type :var}
                            {:name slurp-backward,
                             :file "rewrite_clj/paredit.cljs",
                             :line 279,
                             :arglists ([zloc]),
                             :doc "Pull in prev left outer node (if none at first level, tries next etc) into\ncurrent S-expression\n\n- `[1 2 [|3] 4 5] => [1 [2 |3] 4 5]`",
                             :type :var}
                            {:name slurp-backward-fully,
                             :file "rewrite_clj/paredit.cljs",
                             :line 306,
                             :arglists ([zloc]),
                             :doc "Pull in all left outer-nodes into current S-expression, but only the ones at the same level\nas the the first one.\n\n- `[1 2 [|3] 4 5] => [[1 2 |3] 4 5]`",
                             :type :var}
                            {:name slurp-forward,
                             :file "rewrite_clj/paredit.cljs",
                             :line 241,
                             :arglists ([zloc]),
                             :doc "Pull in next right outer node (if none at first level, tries next etc) into\ncurrent S-expression\n\n- `[1 2 [|3] 4 5] => [1 2 [|3 4] 5]`",
                             :type :var}
                            {:name slurp-forward-fully,
                             :file "rewrite_clj/paredit.cljs",
                             :line 264,
                             :arglists ([zloc]),
                             :doc "Pull in all right outer-nodes into current S-expression, but only the ones at the same level\nas the the first one.\n\n- `[1 2 [|3] 4 5] => [1 2 [|3 4 5]]`",
                             :type :var}
                            {:name splice,
                             :file "rewrite_clj/paredit.cljs",
                             :line 391,
                             :doc "See rewrite-clj.zip/splice\n",
                             :type :var}
                            {:name splice-killing-backward,
                             :file "rewrite_clj/paredit.cljs",
                             :line 406,
                             :arglists ([zloc]),
                             :doc "Remove left siblings of current given node in S-Expression and unwrap remaining into enclosing S-expression\n\n- `(foo (let ((x 5)) |(sqrt n)) bar) => (foo (sqrt n) bar)`",
                             :type :var}
                            {:name splice-killing-forward,
                             :file "rewrite_clj/paredit.cljs",
                             :line 413,
                             :arglists ([zloc]),
                             :doc "Remove current given node and its right siblings in S-Expression and unwrap remaining into enclosing S-expression\n\n- `(a (b c |d e) f) => (a b |c f)`",
                             :type :var}
                            {:name split,
                             :file "rewrite_clj/paredit.cljs",
                             :line 425,
                             :arglists ([zloc]),
                             :doc "Split current s-sexpression in two at given node `zloc`\n\n-  `[1 2 |3 4 5] => [1 2 3] [4 5]`",
                             :type :var}
                            {:name split-at-pos,
                             :file "rewrite_clj/paredit.cljs",
                             :line 465,
                             :arglists ([zloc pos]),
                             :doc "In string aware split\n\nPerform split at given position `pos` Like split, but:\n\n- if inside string splits string into two strings\n\n`pos` should provide `{:row :col }` which are relative to the start of the given form the zipper represents\n`zloc` must be positioned at a node previous (given depth first) to the node at given pos",
                             :type :var}
                            {:name wrap-around,
                             :file "rewrite_clj/paredit.cljs",
                             :line 367,
                             :arglists ([zloc t]),
                             :doc "Wrap current node with a given type `t` (:vector, :list, :set, :map :fn)\n\n- `|123 => [|123] ; given :vector`\n- `|[1 [2]] => [|[1 [2]]]`",
                             :type :var}
                            {:name wrap-fully-forward-slurp,
                             :file "rewrite_clj/paredit.cljs",
                             :line 381,
                             :arglists ([zloc t]),
                             :doc "Create a new seq node of type `t` left of `zloc` then slurp fully into the new node\n\n- `[1 |2 3 4] => [1 [|2 3 4]]`",
                             :type :var})}
                 {:name rewrite-clj.parser,
                  :publics ({:name parse,
                             :file "rewrite_clj/parser.cljs",
                             :line 8,
                             :arglists ([reader]),
                             :doc "Parse next form from the given reader.\n",
                             :type :var}
                            {:name parse-all,
                             :file "rewrite_clj/parser.cljs",
                             :line 13,
                             :arglists ([reader]),
                             :doc "Parse all forms from the given reader.\n",
                             :type :var}
                            {:name parse-string,
                             :file "rewrite_clj/parser.cljs",
                             :line 25,
                             :arglists ([s]),
                             :doc "Parse first form in the given string.\n",
                             :type :var}
                            {:name parse-string-all,
                             :file "rewrite_clj/parser.cljs",
                             :line 30,
                             :arglists ([s]),
                             :doc "Parse all forms in the given string.\n",
                             :type :var})}
                 {:name rewrite-clj.parser.core,
                  :publics ({:name parse-next,
                             :file "rewrite_clj/parser/core.cljs",
                             :line 168,
                             :arglists ([rdr]),
                             :type :var})}
                 {:name rewrite-clj.parser.keyword,
                  :publics ({:name parse-keyword,
                             :file "rewrite_clj/parser/keyword.cljs",
                             :line 6,
                             :arglists ([reader]),
                             :type :var})}
                 {:name rewrite-clj.parser.string,
                  :publics ({:name parse-regex,
                             :file "rewrite_clj/parser/string.cljs",
                             :line 36,
                             :arglists ([reader]),
                             :type :var}
                            {:name parse-string,
                             :file "rewrite_clj/parser/string.cljs",
                             :line 32,
                             :arglists ([reader]),
                             :type :var})}
                 {:name rewrite-clj.parser.token,
                  :publics ({:name parse-token,
                             :file "rewrite_clj/parser/token.cljs",
                             :line 55,
                             :arglists ([reader]),
                             :doc "Parse a single token.\n",
                             :type :var})}
                 {:name rewrite-clj.parser.whitespace,
                  :publics ({:name parse-whitespace,
                             :file "rewrite_clj/parser/whitespace.cljs",
                             :line 5,
                             :arglists ([reader]),
                             :doc "Parse as much whitespace as possible. The created node can either contain\nonly linebreaks or only space/tabs.",
                             :type :var})}
                 {:name rewrite-clj.reader,
                  :publics ({:name boundary?,
                             :file "rewrite_clj/reader.cljs",
                             :line 29,
                             :arglists ([c]),
                             :doc "Check whether a given char is a token boundary.\n",
                             :type :var}
                            {:name buf,
                             :file "rewrite_clj/reader.cljs",
                             :line 55,
                             :type :var}
                            {:name get-column-number,
                             :file "rewrite_clj/reader.cljs",
                             :line 10,
                             :type :var}
                            {:name get-line-number,
                             :file "rewrite_clj/reader.cljs",
                             :line 11,
                             :type :var}
                            {:name ignore,
                             :file "rewrite_clj/reader.cljs",
                             :line 101,
                             :arglists ([reader]),
                             :doc "Ignore the next character.\n",
                             :type :var}
                            {:name indexing-push-back-reader,
                             :file "rewrite_clj/reader.cljs",
                             :line 13,
                             :type :var}
                            {:name linebreak?,
                             :file "rewrite_clj/reader.cljs",
                             :line 41,
                             :arglists ([c]),
                             :doc "Checks whether the character is a newline\n",
                             :type :var}
                            {:name next,
                             :file "rewrite_clj/reader.cljs",
                             :line 108,
                             :arglists ([reader]),
                             :doc "Read next char.\n",
                             :type :var}
                            {:name peek,
                             :file "rewrite_clj/reader.cljs",
                             :line 113,
                             :arglists ([reader]),
                             :doc "Peek next char.\n",
                             :type :var}
                            {:name peek-char,
                             :file "rewrite_clj/reader.cljs",
                             :line 12,
                             :type :var}
                            {:name read-char,
                             :file "rewrite_clj/reader.cljs",
                             :line 9,
                             :type :var}
                            {:name read-include-linebreak,
                             :file "rewrite_clj/reader.cljs",
                             :line 87,
                             :arglists ([reader]),
                             :doc "Read until linebreak and include it.\n",
                             :type :var}
                            {:name read-keyword,
                             :file "rewrite_clj/reader.cljs",
                             :line 179,
                             :arglists ([reader initch]),
                             :type :var}
                            {:name read-n,
                             :file "rewrite_clj/reader.cljs",
                             :line 150,
                             :arglists ([reader node-tag read-fn p? n]),
                             :doc "Call the given function on the given reader until `n` values matching `p?` have been\ncollected.",
                             :type :var}
                            {:name read-repeatedly,
                             :file "rewrite_clj/reader.cljs",
                             :line 141,
                             :arglists ([reader read-fn]),
                             :doc "Call the given function on the given reader until it returns\na non-truthy value.",
                             :type :var}
                            {:name read-string,
                             :file "rewrite_clj/reader.cljs",
                             :line 15,
                             :type :var}
                            {:name read-until,
                             :file "rewrite_clj/reader.cljs",
                             :line 78,
                             :arglists ([reader p?]),
                             :doc "Read until a char fulfills the given condition. Ignores the\nmatching char.",
                             :type :var}
                            {:name read-while,
                             :file "rewrite_clj/reader.cljs",
                             :line 57,
                             :arglists ([reader p?] [reader p? eof?]),
                             :doc "Read while the chars fulfill the given condition. Ignores\nthe unmatching char.",
                             :type :var}
                            {:name read-with-meta,
                             :file "rewrite_clj/reader.cljs",
                             :line 120,
                             :arglists ([reader read-fn]),
                             :doc "Use the given function to read value, then attach row/col metadata.\n",
                             :type :var}
                            {:name space?,
                             :file "rewrite_clj/reader.cljs",
                             :line 46,
                             :arglists ([c]),
                             :doc "Checks whether the character is a space\n",
                             :type :var}
                            {:name string->edn,
                             :file "rewrite_clj/reader.cljs",
                             :line 96,
                             :arglists ([s]),
                             :doc "Convert string to EDN value.\n",
                             :type :var}
                            {:name throw-reader,
                             :file "rewrite_clj/reader.cljs",
                             :line 18,
                             :arglists ([reader fmt & data]),
                             :doc "Throw reader exception, including line/column.\n",
                             :type :var}
                            {:name unread,
                             :file "rewrite_clj/reader.cljs",
                             :line 14,
                             :type :var}
                            {:name whitespace-or-boundary?,
                             :file "rewrite_clj/reader.cljs",
                             :line 51,
                             :arglists ([c]),
                             :type :var})}
                 {:name rewrite-clj.zip,
                  :doc "Client facing facade for zipper functions\n",
                  :publics ({:name append-child,
                             :file "rewrite_clj/zip.cljs",
                             :line 168,
                             :doc "See [[insert/append-child]]\n",
                             :type :var}
                            {:name assoc,
                             :file "rewrite_clj/zip.cljs",
                             :line 203,
                             :doc "See [[seqz/assoc]]\n",
                             :type :var}
                            {:name down,
                             :file "rewrite_clj/zip.cljs",
                             :line 54,
                             :doc "See [[move/down]]\n",
                             :type :var}
                            {:name edit,
                             :file "rewrite_clj/zip.cljs",
                             :line 132,
                             :doc "See [[editz/edit]]\n",
                             :type :var}
                            {:name end?,
                             :file "rewrite_clj/zip.cljs",
                             :line 63,
                             :doc "See [[move/end?]]\n",
                             :type :var}
                            {:name find,
                             :file "rewrite_clj/zip.cljs",
                             :line 87,
                             :doc "See [[findz/find]]\n",
                             :type :var}
                            {:name find-depth-first,
                             :file "rewrite_clj/zip.cljs",
                             :line 93,
                             :doc "See [[findz/find-depth-first]]\n",
                             :type :var}
                            {:name find-last-by-pos,
                             :file "rewrite_clj/zip.cljs",
                             :line 90,
                             :doc "See [[findz/find-last-by-pos]]\n",
                             :type :var}
                            {:name find-next,
                             :file "rewrite_clj/zip.cljs",
                             :line 96,
                             :doc "See [[findz/find-next]]\n",
                             :type :var}
                            {:name find-next-depth-first,
                             :file "rewrite_clj/zip.cljs",
                             :line 99,
                             :doc "See [[findz/find-next-depth-first]]\n",
                             :type :var}
                            {:name find-next-tag,
                             :file "rewrite_clj/zip.cljs",
                             :line 105,
                             :doc "See [[findz/find-next-tag]]\n",
                             :type :var}
                            {:name find-next-token,
                             :file "rewrite_clj/zip.cljs",
                             :line 114,
                             :doc "See [[findz/find-next-token]]\n",
                             :type :var}
                            {:name find-next-value,
                             :file "rewrite_clj/zip.cljs",
                             :line 120,
                             :doc "See [[findz/find-next-value]]\n",
                             :type :var}
                            {:name find-tag,
                             :file "rewrite_clj/zip.cljs",
                             :line 102,
                             :doc "See [[findz/find-tag]]\n",
                             :type :var}
                            {:name find-tag-by-pos,
                             :file "rewrite_clj/zip.cljs",
                             :line 108,
                             :doc "See [[findz/tag-by-pos]]\n",
                             :type :var}
                            {:name find-token,
                             :file "rewrite_clj/zip.cljs",
                             :line 111,
                             :doc "See [[findz/find-token]]\n",
                             :type :var}
                            {:name find-value,
                             :file "rewrite_clj/zip.cljs",
                             :line 117,
                             :doc "See [[findz/find-value]]\n",
                             :type :var}
                            {:name get,
                             :file "rewrite_clj/zip.cljs",
                             :line 200,
                             :doc "See [[seqz/get]]\n",
                             :type :var}
                            {:name insert-child,
                             :file "rewrite_clj/zip.cljs",
                             :line 165,
                             :doc "See [[insert/insert-child]]\n",
                             :type :var}
                            {:name insert-left,
                             :file "rewrite_clj/zip.cljs",
                             :line 162,
                             :doc "See [[insert/insert-left]]\n",
                             :type :var}
                            {:name insert-right,
                             :file "rewrite_clj/zip.cljs",
                             :line 159,
                             :doc "See [[insert/insert-right]]\n",
                             :type :var}
                            {:name left,
                             :file "rewrite_clj/zip.cljs",
                             :line 51,
                             :doc "See [[move/left]]\n",
                             :type :var}
                            {:name leftmost,
                             :file "rewrite_clj/zip.cljs",
                             :line 75,
                             :doc "See [[move/leftmost]]\n",
                             :type :var}
                            {:name leftmost?,
                             :file "rewrite_clj/zip.cljs",
                             :line 69,
                             :doc "See [[move/leftmost?]]\n",
                             :type :var}
                            {:name list?,
                             :file "rewrite_clj/zip.cljs",
                             :line 179,
                             :doc "See [[seqz/list?]]\n",
                             :type :var}
                            {:name map,
                             :file "rewrite_clj/zip.cljs",
                             :line 197,
                             :doc "See [[seqz/map]]\n",
                             :type :var}
                            {:name map-keys,
                             :file "rewrite_clj/zip.cljs",
                             :line 194,
                             :doc "See [[seqz/map-keys]]\n",
                             :type :var}
                            {:name map-vals,
                             :file "rewrite_clj/zip.cljs",
                             :line 191,
                             :doc "See [[seqz/map-vals]]\n",
                             :type :var}
                            {:name map?,
                             :file "rewrite_clj/zip.cljs",
                             :line 188,
                             :doc "See [[seqz/map?]]\n",
                             :type :var}
                            {:name next,
                             :file "rewrite_clj/zip.cljs",
                             :line 60,
                             :doc "See [[move/next]]\n",
                             :type :var}
                            {:name node,
                             :file "rewrite_clj/zip.cljs",
                             :line 18,
                             :doc "Function reference to clojure.zip/node\n",
                             :type :var}
                            {:name of-string,
                             :file "rewrite_clj/zip.cljs",
                             :line 26,
                             :doc "See [[base/of-string]]\n",
                             :type :var}
                            {:name prefix,
                             :file "rewrite_clj/zip.cljs",
                             :line 138,
                             :doc "See [[editz/prefix]]\n",
                             :type :var}
                            {:name prev,
                             :file "rewrite_clj/zip.cljs",
                             :line 72,
                             :doc "See [[move/prev]]\n",
                             :type :var}
                            {:name remove,
                             :file "rewrite_clj/zip.cljs",
                             :line 148,
                             :doc "See [[removez/remove]]\n",
                             :type :var}
                            {:name remove-preserve-newline,
                             :file "rewrite_clj/zip.cljs",
                             :line 151,
                             :doc "See [[removez/remove-preserve-newline]]\n",
                             :type :var}
                            {:name replace,
                             :file "rewrite_clj/zip.cljs",
                             :line 129,
                             :doc "See [[editz/replace]]\n",
                             :type :var}
                            {:name right,
                             :file "rewrite_clj/zip.cljs",
                             :line 48,
                             :doc "See [[move/right]]\n",
                             :type :var}
                            {:name rightmost,
                             :file "rewrite_clj/zip.cljs",
                             :line 78,
                             :doc "See [[move/rightmost]]\n",
                             :type :var}
                            {:name rightmost?,
                             :file "rewrite_clj/zip.cljs",
                             :line 66,
                             :doc "See [[move/rightmost?]]\n",
                             :type :var}
                            {:name root,
                             :file "rewrite_clj/zip.cljs",
                             :line 21,
                             :doc "Function reference to clojure.zip/root\n",
                             :type :var}
                            {:name root-string,
                             :file "rewrite_clj/zip.cljs",
                             :line 29,
                             :doc "See [[base/root-string]]\n",
                             :type :var}
                            {:name seq?,
                             :file "rewrite_clj/zip.cljs",
                             :line 176,
                             :doc "See [[seqz/seq?]]\n",
                             :type :var}
                            {:name set?,
                             :file "rewrite_clj/zip.cljs",
                             :line 185,
                             :doc "See [[seqz/set?]]\n",
                             :type :var}
                            {:name sexpr,
                             :file "rewrite_clj/zip.cljs",
                             :line 38,
                             :doc "See [[base/sexpr]]\n",
                             :type :var}
                            {:name splice,
                             :file "rewrite_clj/zip.cljs",
                             :line 135,
                             :doc "See [[editz/splice]]\n",
                             :type :var}
                            {:name string,
                             :file "rewrite_clj/zip.cljs",
                             :line 32,
                             :doc "See [[base/string]]\n",
                             :type :var}
                            {:name suffix,
                             :file "rewrite_clj/zip.cljs",
                             :line 141,
                             :doc "See [[editz/suffix]]\n",
                             :type :var}
                            {:name tag,
                             :file "rewrite_clj/zip.cljs",
                             :line 35,
                             :doc "See [[base/tag]]\n",
                             :type :var}
                            {:name up,
                             :file "rewrite_clj/zip.cljs",
                             :line 57,
                             :doc "See [[move/up]]\n",
                             :type :var}
                            {:name vector?,
                             :file "rewrite_clj/zip.cljs",
                             :line 182,
                             :doc "See [[seqz/vector?]]\n",
                             :type :var})}
                 {:name rewrite-clj.zip.base,
                  :publics ({:name child-sexprs,
                             :file "rewrite_clj/zip/base.cljs",
                             :line 41,
                             :arglists ([zloc]),
                             :doc "Get children as s-expressions.\n",
                             :type :var}
                            {:name edn,
                             :file "rewrite_clj/zip/base.cljs",
                             :line 19,
                             :arglists ([node]),
                             :doc "Create zipper over the given Clojure/EDN node and move\nto the first non-whitespace/non-comment child.",
                             :type :var}
                            {:name edn*,
                             :file "rewrite_clj/zip/base.cljs",
                             :line 10,
                             :arglists ([node]),
                             :doc "Create zipper over the given Clojure/EDN node.\n",
                             :type :var}
                            {:name length,
                             :file "rewrite_clj/zip/base.cljs",
                             :line 46,
                             :arglists ([zloc]),
                             :doc "Get length of printable string for the given zipper location.\n",
                             :type :var}
                            {:name of-string,
                             :file "rewrite_clj/zip/base.cljs",
                             :line 54,
                             :arglists ([s]),
                             :doc "Create zipper from String.\n",
                             :type :var}
                            {:name root-string,
                             :file "rewrite_clj/zip/base.cljs",
                             :line 67,
                             :arglists ([zloc]),
                             :doc "Create string representing the zipped-up zipper.\n",
                             :type :var}
                            {:name sexpr,
                             :file "rewrite_clj/zip/base.cljs",
                             :line 36,
                             :arglists ([zloc]),
                             :doc "Get sexpr represented by the given node.\n",
                             :type :var}
                            {:name string,
                             :file "rewrite_clj/zip/base.cljs",
                             :line 62,
                             :arglists ([zloc]),
                             :doc "Create string representing the current zipper location.\n",
                             :type :var}
                            {:name tag,
                             :file "rewrite_clj/zip/base.cljs",
                             :line 31,
                             :arglists ([zloc]),
                             :doc "Get tag of node at the current zipper location.\n",
                             :type :var})}
                 {:name rewrite-clj.zip.editz,
                  :publics ({:name edit,
                             :file "rewrite_clj/zip/editz.cljs",
                             :line 28,
                             :arglists ([zloc f & args]),
                             :doc "Apply the given function to the s-expression at the given\nlocation, using its result to replace the node there. (The\nresult will be coerced to a node if possible.)",
                             :type :var}
                            {:name prefix,
                             :file "rewrite_clj/zip/editz.cljs",
                             :line 77,
                             :arglists ([zloc s]),
                             :type :var}
                            {:name replace,
                             :file "rewrite_clj/zip/editz.cljs",
                             :line 13,
                             :arglists ([zloc value]),
                             :doc "Replace the node at the given location with one representing\nthe given value. (The value will be coerced to a node if\npossible.)",
                             :type :var}
                            {:name splice,
                             :file "rewrite_clj/zip/editz.cljs",
                             :line 39,
                             :arglists ([zloc]),
                             :doc "Splice the given node, i.e. merge its children into the current one\n(akin to Clojure's `unquote-splicing` macro: `~@...`).\n- if the node is not one that can have children, no modification will\n  be performed.\n- if the node has no or only whitespace children, it will be removed.\n- otherwise, splicing will be performed, moving the zipper to the first\n  non-whitespace child afterwards.\n",
                             :type :var}
                            {:name suffix,
                             :file "rewrite_clj/zip/editz.cljs",
                             :line 87,
                             :arglists ([zloc s]),
                             :type :var})}
                 {:name rewrite-clj.zip.findz,
                  :publics ({:name find,
                             :file "rewrite_clj/zip/findz.cljs",
                             :line 29,
                             :arglists ([zloc p?] [zloc f p?]),
                             :doc "Find node satisfying the given predicate by repeatedly\napplying the given movement function to the initial zipper\nlocation.",
                             :type :var}
                            {:name find-depth-first,
                             :file "rewrite_clj/zip/findz.cljs",
                             :line 60,
                             :arglists ([zloc p?]),
                             :doc "Find node satisfying the given predicate by traversing\nthe zipper in a depth-first way.",
                             :type :var}
                            {:name find-last-by-pos,
                             :file "rewrite_clj/zip/findz.cljs",
                             :line 45,
                             :arglists ([zloc pos] [zloc pos p?]),
                             :doc "Find last node (if more than one node) that is in range of pos and\nsatisfying the given predicate depth first from initial zipper\nlocation.",
                             :type :var}
                            {:name find-next,
                             :file "rewrite_clj/zip/findz.cljs",
                             :line 67,
                             :arglists ([zloc p?] [zloc f p?]),
                             :doc "Find node other than the current zipper location matching\nthe given predicate by applying the given movement function\nto the initial zipper location.",
                             :type :var}
                            {:name find-next-depth-first,
                             :file "rewrite_clj/zip/findz.cljs",
                             :line 76,
                             :arglists ([zloc p?]),
                             :doc "Find node other than the current zipper location matching\nthe given predicate by traversing the zipper in a\ndepth-first way.",
                             :type :var}
                            {:name find-next-tag,
                             :file "rewrite_clj/zip/findz.cljs",
                             :line 91,
                             :arglists ([zloc t] [zloc f t]),
                             :doc "Find node other than the current zipper location with the\ngiven tag by repeatedly applying the given movement function to\nthe initial zipper location.",
                             :type :var}
                            {:name find-next-token,
                             :file "rewrite_clj/zip/findz.cljs",
                             :line 119,
                             :arglists ([zloc p?] [zloc f p?]),
                             :doc "Find next token node matching the given predicate by applying the\ngiven movement function to the initial zipper location, defaulting\nto `right`.",
                             :type :var}
                            {:name find-next-value,
                             :file "rewrite_clj/zip/findz.cljs",
                             :line 140,
                             :arglists ([zloc v] [zloc f v]),
                             :doc "Find next token node whose value matches the given one by applying the\ngiven movement function to the initial zipper location, defaulting\nto `right`.",
                             :type :var}
                            {:name find-tag,
                             :file "rewrite_clj/zip/findz.cljs",
                             :line 83,
                             :arglists ([zloc t] [zloc f t]),
                             :doc "Find node with the given tag by repeatedly applying the given\nmovement function to the initial zipper location.",
                             :type :var}
                            {:name find-tag-by-pos,
                             :file "rewrite_clj/zip/findz.cljs",
                             :line 102,
                             :arglists ([zloc pos t]),
                             :doc "Find node with the given tag and pos depth-first from initial zipper location.\n",
                             :type :var}
                            {:name find-token,
                             :file "rewrite_clj/zip/findz.cljs",
                             :line 109,
                             :arglists ([zloc p?] [zloc f p?]),
                             :doc "Find token node matching the given predicate by applying the\ngiven movement function to the initial zipper location, defaulting\nto `right`.",
                             :type :var}
                            {:name find-value,
                             :file "rewrite_clj/zip/findz.cljs",
                             :line 128,
                             :arglists ([zloc v] [zloc f v]),
                             :doc "Find token node whose value matches the given one by applying the\ngiven movement function to the initial zipper location, defaulting\nto `right`.",
                             :type :var}
                            {:name in-range?,
                             :file "rewrite_clj/zip/findz.cljs",
                             :line 20,
                             :arglists ([{:keys [row
                                                 col
                                                 end-row
                                                 end-col]}
                                         {r :row, c :col}]),
                             :type :var})}
                 {:name rewrite-clj.zip.insert,
                  :no-doc true,
                  :publics ({:name append-child,
                             :file "rewrite_clj/zip/insert.cljs",
                             :line 48,
                             :arglists ([zloc item]),
                             :doc "Insert item as last child of the current node. Will insert a space if necessary.\n",
                             :type :var}
                            {:name insert-child,
                             :file "rewrite_clj/zip/insert.cljs",
                             :line 39,
                             :arglists ([zloc item]),
                             :doc "Insert item as first child of the current node. Will insert a space if necessary.\n",
                             :type :var}
                            {:name insert-left,
                             :file "rewrite_clj/zip/insert.cljs",
                             :line 30,
                             :arglists ([zloc item]),
                             :doc "Insert item to the right of the left location. Will insert a space if necessary.\n",
                             :type :var}
                            {:name insert-right,
                             :file "rewrite_clj/zip/insert.cljs",
                             :line 21,
                             :arglists ([zloc item]),
                             :doc "Insert item to the right of the current location. Will insert a space if necessary.\n",
                             :type :var})}
                 {:name rewrite-clj.zip.move,
                  :publics ({:name down,
                             :file "rewrite_clj/zip/move.cljs",
                             :line 16,
                             :arglists ([zloc]),
                             :doc "Move down to next non-whitespace/non-comment location.\n",
                             :type :var}
                            {:name end?,
                             :file "rewrite_clj/zip/move.cljs",
                             :line 35,
                             :arglists ([zloc]),
                             :doc "Check whether the given node is at the end of the depth-first traversal.\n",
                             :type :var}
                            {:name left,
                             :file "rewrite_clj/zip/move.cljs",
                             :line 11,
                             :arglists ([zloc]),
                             :doc "Move left to next non-whitespace/non-comment location.\n",
                             :type :var}
                            {:name leftmost,
                             :file "rewrite_clj/zip/move.cljs",
                             :line 61,
                             :arglists ([zloc]),
                             :doc "Move to the leftmost non-whitespace/non-comment location.\n",
                             :type :var}
                            {:name leftmost?,
                             :file "rewrite_clj/zip/move.cljs",
                             :line 48,
                             :arglists ([zloc]),
                             :doc "Check if the given location represents the leftmost non-whitespace/\nnon-comment one.",
                             :type :var}
                            {:name next,
                             :file "rewrite_clj/zip/move.cljs",
                             :line 26,
                             :arglists ([zloc]),
                             :doc "Move to the next non-whitespace/non-comment location in a depth-first manner.\n",
                             :type :var}
                            {:name prev,
                             :file "rewrite_clj/zip/move.cljs",
                             :line 54,
                             :arglists ([zloc]),
                             :doc "Move to the next non-whitespace/non-comment location in a depth-first manner.\n",
                             :type :var}
                            {:name right,
                             :file "rewrite_clj/zip/move.cljs",
                             :line 6,
                             :arglists ([zloc]),
                             :doc "Move right to next non-whitespace/non-comment location.\n",
                             :type :var}
                            {:name rightmost,
                             :file "rewrite_clj/zip/move.cljs",
                             :line 68,
                             :arglists ([zloc]),
                             :doc "Move to the rightmost non-whitespace/non-comment location.\n",
                             :type :var}
                            {:name rightmost?,
                             :file "rewrite_clj/zip/move.cljs",
                             :line 42,
                             :arglists ([zloc]),
                             :doc "Check if the given location represents the leftmost non-whitespace/\nnon-comment one.",
                             :type :var}
                            {:name up,
                             :file "rewrite_clj/zip/move.cljs",
                             :line 21,
                             :arglists ([zloc]),
                             :doc "Move up to next non-whitespace/non-comment location.\n",
                             :type :var})}
                 {:name rewrite-clj.zip.removez,
                  :publics ({:name remove,
                             :file "rewrite_clj/zip/removez.cljs",
                             :line 19,
                             :arglists ([zloc]),
                             :doc "Remove value at the given zipper location. Returns the first non-whitespace\n node that would have preceded it in a depth-first walk. Will remove whitespace\n appropriately.\n\n- `[1  2  3]   => [1  3]`\n- `[1 2]       => [1]`\n- `[1 2]       => [2]`\n- `[1]         => []`\n- `[  1  ]     => []`\n- `[1 [2 3] 4] => [1 [2 3]]`\n- `[1 [2 3] 4] => [[2 3] 4]`\n\n If a node is located rightmost, both preceding and trailing spaces are removed,\n otherwise only trailing spaces are touched. This means that a following element\n (no matter whether on the same line or not) will end up in the same position\n (line/column) as the removed one, _unless_ a comment lies between the original\n node and the neighbour.",
                             :type :var}
                            {:name remove-preserve-newline,
                             :file "rewrite_clj/zip/removez.cljs",
                             :line 48,
                             :arglists ([zloc]),
                             :doc "Same as remove but preserves newlines\n",
                             :type :var})}
                 {:name rewrite-clj.zip.seqz,
                  :publics ({:name assoc,
                             :file "rewrite_clj/zip/seqz.cljs",
                             :line 99,
                             :arglists ([zloc k v]),
                             :doc "Set map/seq element to the given value.\n",
                             :type :var}
                            {:name get,
                             :file "rewrite_clj/zip/seqz.cljs",
                             :line 87,
                             :arglists ([zloc k]),
                             :doc "If a map is given, get element with the given key; if a seq is given, get nth element.\n",
                             :type :var}
                            {:name list?,
                             :file "rewrite_clj/zip/seqz.cljs",
                             :line 18,
                             :arglists ([zloc]),
                             :type :var}
                            {:name map,
                             :file "rewrite_clj/zip/seqz.cljs",
                             :line 76,
                             :arglists ([f zloc]),
                             :doc "Apply function to all value nodes in the given seq node. Iterates over\nvalue nodes of maps but over each element of a seq.",
                             :type :var}
                            {:name map-keys,
                             :file "rewrite_clj/zip/seqz.cljs",
                             :line 64,
                             :arglists ([f zloc]),
                             :doc "Apply function to all key nodes of the given map node.\n",
                             :type :var}
                            {:name map-vals,
                             :file "rewrite_clj/zip/seqz.cljs",
                             :line 50,
                             :arglists ([f zloc]),
                             :doc "Apply function to all value nodes of the given map node.\n",
                             :type :var}
                            {:name map?,
                             :file "rewrite_clj/zip/seqz.cljs",
                             :line 30,
                             :arglists ([zloc]),
                             :type :var}
                            {:name seq?,
                             :file "rewrite_clj/zip/seqz.cljs",
                             :line 12,
                             :arglists ([zloc]),
                             :type :var}
                            {:name set?,
                             :file "rewrite_clj/zip/seqz.cljs",
                             :line 26,
                             :arglists ([zloc]),
                             :type :var}
                            {:name vector?,
                             :file "rewrite_clj/zip/seqz.cljs",
                             :line 22,
                             :arglists ([zloc]),
                             :type :var})}
                 {:name rewrite-clj.zip.utils,
                  :no-doc true,
                  :publics ({:name remove-and-move-left,
                             :file "rewrite_clj/zip/utils.cljs",
                             :line 59,
                             :arglists ([[_
                                          {:keys [l], :as path}
                                          :as
                                          loc]]),
                             :doc "Remove current node and move left. If current node is at the leftmost\nlocation, returns `nil`.",
                             :type :var}
                            {:name remove-and-move-right,
                             :file "rewrite_clj/zip/utils.cljs",
                             :line 70,
                             :arglists ([[_
                                          {:keys [r], :as path}
                                          :as
                                          loc]]),
                             :doc "Remove current node and move right. If current node is at the rightmost\nlocation, returns `nil`.",
                             :type :var}
                            {:name remove-and-move-up,
                             :file "rewrite_clj/zip/utils.cljs",
                             :line 82,
                             :arglists ([loc]),
                             :type :var}
                            {:name remove-left,
                             :file "rewrite_clj/zip/utils.cljs",
                             :line 20,
                             :arglists ([loc]),
                             :doc "Remove left sibling of the current node (if there is one).\n",
                             :type :var}
                            {:name remove-left-while,
                             :file "rewrite_clj/zip/utils.cljs",
                             :line 46,
                             :arglists ([zloc p?]),
                             :doc "Remove elements to the left of the current zipper location as long as\nthe given predicate matches.",
                             :type :var}
                            {:name remove-right,
                             :file "rewrite_clj/zip/utils.cljs",
                             :line 15,
                             :arglists ([loc]),
                             :doc "Remove right sibling of the current node (if there is one).\n",
                             :type :var}
                            {:name remove-right-while,
                             :file "rewrite_clj/zip/utils.cljs",
                             :line 35,
                             :arglists ([zloc p?]),
                             :doc "Remove elements to the right of the current zipper location as long as\nthe given predicate matches.",
                             :type :var}
                            {:name remove-while,
                             :file "rewrite_clj/zip/utils.cljs",
                             :line 26,
                             :arglists ([zloc p?]),
                             :type :var})}
                 {:name rewrite-clj.zip.whitespace,
                  :publics ({:name append-newline,
                             :file "rewrite_clj/zip/whitespace.cljs",
                             :line 72,
                             :arglists ([zloc] [zloc n]),
                             :doc "Append a newline node representing the given number of newlines (default: 1).\n",
                             :type :var}
                            {:name append-space,
                             :file "rewrite_clj/zip/whitespace.cljs",
                             :line 60,
                             :arglists ([zloc] [zloc n]),
                             :doc "Append a whitespace node representing the given number of spaces (default: 1).\n",
                             :type :var}
                            {:name comment?,
                             :file "rewrite_clj/zip/whitespace.cljs",
                             :line 15,
                             :arglists ([zloc]),
                             :type :var}
                            {:name linebreak?,
                             :file "rewrite_clj/zip/whitespace.cljs",
                             :line 11,
                             :arglists ([zloc]),
                             :type :var}
                            {:name prepend-newline,
                             :file "rewrite_clj/zip/whitespace.cljs",
                             :line 66,
                             :arglists ([zloc] [zloc n]),
                             :doc "Prepend a newlines node representing the given number of newlines (default: 1).\n",
                             :type :var}
                            {:name prepend-space,
                             :file "rewrite_clj/zip/whitespace.cljs",
                             :line 54,
                             :arglists ([zloc] [zloc n]),
                             :doc "Prepend a whitespace node representing the given number of spaces (default: 1).\n",
                             :type :var}
                            {:name skip,
                             :file "rewrite_clj/zip/whitespace.cljs",
                             :line 32,
                             :arglists ([f p? zloc]),
                             :doc "Perform the given movement while the given predicate returns true.\n",
                             :type :var}
                            {:name skip-whitespace,
                             :file "rewrite_clj/zip/whitespace.cljs",
                             :line 41,
                             :arglists ([zloc] [f zloc]),
                             :doc "Perform the given movement (default: `z/right`) until a non-whitespace/\nnon-comment node is encountered.",
                             :type :var}
                            {:name skip-whitespace-left,
                             :file "rewrite_clj/zip/whitespace.cljs",
                             :line 47,
                             :arglists ([zloc]),
                             :doc "Move left until a non-whitespace/non-comment node is encountered.\n",
                             :type :var}
                            {:name whitespace-not-linebreak?,
                             :file "rewrite_clj/zip/whitespace.cljs",
                             :line 19,
                             :arglists ([zloc]),
                             :type :var}
                            {:name whitespace-or-comment?,
                             :file "rewrite_clj/zip/whitespace.cljs",
                             :line 25,
                             :arglists ([zloc]),
                             :type :var}
                            {:name whitespace?,
                             :file "rewrite_clj/zip/whitespace.cljs",
                             :line 7,
                             :arglists ([zloc]),
                             :type :var})})},
 :pom-str "<?xml version=\"1.0\" encoding=\"UTF-8\"?><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>rewrite-cljs</groupId>\n  <artifactId>rewrite-cljs</artifactId>\n  <packaging>jar</packaging>\n  <version>0.4.4</version>\n  <name>rewrite-cljs</name>\n  <description>Comment-/Whitespace-preserving rewriting of EDN documents.</description>\n  <url>https://github.com/rundis/rewrite-cljs</url>\n  <licenses>\n    <license>\n      <name>MIT License</name>\n      <url>http://opensource.org/licenses/MIT</url>\n    </license>\n  </licenses>\n  <scm>\n    <connection>scm:git:git://github.com/rundis/rewrite-cljs.git</connection>\n    <developerConnection>scm:git:ssh://git@github.com/rundis/rewrite-cljs.git</developerConnection>\n    <tag>5ed0980d4fc65ba00780deadb3cf245d742bfeb9\n</tag>\n    <url>https://github.com/rundis/rewrite-cljs</url>\n  </scm>\n  <build>\n    <sourceDirectory>src</sourceDirectory>\n    <testSourceDirectory>test</testSourceDirectory>\n    <resources>\n      <resource>\n        <directory>resources</directory>\n      </resource>\n    </resources>\n    <testResources>\n      <testResource>\n        <directory>resources</directory>\n      </testResource>\n    </testResources>\n    <directory>target</directory>\n    <outputDirectory>target/classes</outputDirectory>\n    <plugins/>\n  </build>\n  <repositories>\n    <repository>\n      <id>central</id>\n      <url>https://repo1.maven.org/maven2/</url>\n      <snapshots>\n        <enabled>false</enabled>\n      </snapshots>\n      <releases>\n        <enabled>true</enabled>\n      </releases>\n    </repository>\n    <repository>\n      <id>clojars</id>\n      <url>https://clojars.org/repo/</url>\n      <snapshots>\n        <enabled>true</enabled>\n      </snapshots>\n      <releases>\n        <enabled>true</enabled>\n      </releases>\n    </repository>\n  </repositories>\n  <dependencyManagement>\n    <dependencies/>\n  </dependencyManagement>\n  <dependencies>\n    <dependency>\n      <groupId>org.clojure</groupId>\n      <artifactId>clojure</artifactId>\n      <version>1.7.0</version>\n    </dependency>\n    <dependency>\n      <groupId>org.clojure</groupId>\n      <artifactId>clojurescript</artifactId>\n      <version>1.7.228</version>\n      <exclusions>\n        <exclusion>\n          <groupId>org.apache.ant</groupId>\n          <artifactId>ant</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n    <dependency>\n      <groupId>org.clojure</groupId>\n      <artifactId>tools.reader</artifactId>\n      <version>1.0.5</version>\n    </dependency>\n  </dependencies>\n</project>\n\n<!-- This file was autogenerated by Leiningen.\n  Please do not edit it directly; instead edit project.clj and regenerate it.\n  It should not be considered canonical data. For more information see\n  https://github.com/technomancy/leiningen -->\n"}
